<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WUYUEZONG on a half fish</title><link>/</link><description>Recent content in WUYUEZONG on a half fish</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 13 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Upaper: 高清壁纸</title><link>/apps/upaper/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>/apps/upaper/</guid><description>隐私政策> 隐私政策 # 欢迎您访问我们的产品。 Upaper （包括App等产品提供的服务，以下简称“产品和服务”）是由 WUYUEZONG （以下简称“我们”）开发并运营的。 确保用户的数据安全和隐私保护是我们的首要任务， 本隐私政策载明了您访问和使用我们的产品和服务时所收集的数据及其处理方式。 请您在继续使用我们的产品前务必认真仔细阅读并确认充分理解本隐私政策全部规则和要点， 一旦您选择使用，即视为您同意本隐私政策的全部内容，同意我们按其收集和使用您的相关信息。 如您在在阅读过程中，对本政策有任何疑问，可联系我们的客服咨询， 请通过 w.yzong@outlook.com 或产品中的反馈方式与我们取得联系。 如您不同意相关协议或其中的任何条款的，您应停止使用我们的产品和服务。
本隐私政策帮助您了解以下内容：
一、我们如何收集和使用您的个人信息； 二、我们如何存储和保护您的个人信息； 三、我们如何共享、转让、公开披露您的个人信息； 一、我们如何收集和使用您的个人信息> 一、我们如何收集和使用您的个人信息 # 个人信息是指以电子或者其他方式记录的能够单独或者与其他信息， 结合识别特定自然人身份或者反映特定自然人活动情况的各种信息。 由于我们的产品和服务并不需要此类信息，因此很高兴的告知您， 我们不会收集关于您的任何个人信息。
二、我们如何存储和保护您的个人信息> 二、我们如何存储和保护您的个人信息 # 作为一般规则，我们仅在实现信息收集目的所需的时间内保留您的个人信息。 我们会在对于管理与您之间的关系严格必要的时间内保留您的个人信息 （例如，当您开立帐户，从我们的产品获取服务时）。 出于遵守法律义务或为证明某项权利或合同满足适用的诉讼时效要求的目的， 我们可能需要在上述期限到期后保留您存档的个人信息，并且无法按您的要求删除。</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/apps/upaper/featured.png"/></item><item><title>WZPageViewController</title><link>/works/06/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>/works/06/</guid><description>头文件> 头文件 # 使用传统MVC的设计模式，通过 dataSource delegate 完成数据接入和动作交互。当然也提供一些基本属性快速方便的设置样式，比如：WZPageMenuItemStyle 标题按钮样式的基本设置。
@interface WZPageContentViewController : UIViewController @property (weak, nonatomic) id&amp;lt;WZPageContentViewControllerDataSource&amp;gt; dataSource; @property (weak, nonatomic) id&amp;lt;WZPageContentViewControllerDelegate&amp;gt; delegate; @property (strong, nonatomic, readonly) UIPageViewController *pageController; @property (strong, nonatomic, readonly) __kindof UIViewController *selectedController; @property (assign, nonatomic, readonly) NSInteger selectedIndex; @property(nonatomic) WZPageMenuItemStyle *selectedStyle; @property(nonatomic) WZPageMenuItemStyle *normalStyle; /// 是否展示分割线 @property(nonatomic) BOOL showDividingLine; /// 是否展示位置指示器 @property(nonatomic) BOOL showIndicator; - (void)reloadDataAt:(NSInteger)index; /// 刷新菜单栏 - (void)reloadMenus; - (void)registerClass:(Class)aClass identifier:(nonnull NSString *)identifier; - (void)registerNib:(UINib *)nib identifier:(NSString *)identifier; @end 设计结果肯定是以业务为依托，搭建基础框架，然后在条条框框里填写需求。所以先看一下代理设置了些啥，最后再拆解整个结构。</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/works/06/featured.jpg"/></item><item><title>封装AI算法升级或切换</title><link>/works/07/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>/works/07/</guid><description>首先AI算法升级或切换的过程需要多个地方监听，所以不能仅在升级页面上写监听逻辑，封装起来使得多个页面都能有能力接收升级回调。
那么这个时候首先会想到单例，在已有的单例中扩充该功能。
需求点> 需求点 # 升级/切换过程及完成首页封面需要变更状态，那么就需要一个容器存储正在升级/切换的设备。 需要监听设备状态反馈到界面上； 如果当前处于升级页面需要显示升级过程； 如果当前处于ai列表，升级完成要及时更新列表； 如果当前处于首页，升级完成要及时更新封面； &amp;hellip; 其他页面优先级不高，暂不考虑 实现> 实现 # 这里可能涉及多台设备更新，所以在单例内部管理一个数组，存储升级中的设备基本信息
SN：可以在回调中判断当前是哪台设备（多设备情况下） 升级/切换信息：设备重启后校验版本或ID判断成功与否 回调记录：回调过长（多）大概率设备没有重启，或其他错误，判断为超时，停止计时器 定时器> 定时器 # 需要持续获取设备信息，那么定时器必不可少，当然它的任务必须在异步执行，防止堵塞主线。
调用设备状态 如果有状态直接输出给回调 如果没有状态，那么设备大概率是断开了，在升级或重启，这个时候需要请求设备算法包信息，不过不需要频繁请求，可以在非主线程中使用同步堵塞调用。一旦设备响应，比对版本信息判断是否升级成功。 以上，升级过程即封装完毕，只需在对应页面启动定时器并实现回调。
回调> 回调 # 在回调时给出相应页面所需参数即可。</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/works/07/featured.jpg"/></item><item><title>时长云存逻辑梳理优化</title><link>/works/02/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>/works/02/</guid><description>当时有这样一个需求，用户可以设置当天的某个时间段，进行录像任务，当用户设置的时间段时，已设置过的时间段需要置灰不可选，这里时间段涉及两个点，一是开始时间，二是时长，而时长的设置是有限制的，它不能超过下一个计划的开始时间，不能大于剩余可设置时长，不大于剩余可设置时长，这个判断很简单，难点在于，根据给出的开始时间找到下一个录像的开始时间，最后计算出可设置时长。 一开始的想法是，把数据分为了，天、时对象。天包含所有不可用的小时及对应的小时对象，小时包含当前小时被占用的分钟区间。 这样在封装数据的时候，小时默认有个初始60分钟，根据被占用分钟区间相减，如果初始值被减到0则表示该小时不可用🚫。天的对象不可用就比较简单，如果小时对象数量小于24表示可用，如果等于24则找到可用的小时，没找到则当天不可用。 至此，解决了页面对应天，小时，分钟的颜色置灰显示。还剩下一个问题，计算可设置的时长。 所以根据数据封装的格式，很自然的把用户选定的开始时间分为，小时和分钟，先从小时开始找，如果当天不可用的小时不包含选定的小时，那处理比较简单，将数据排好序，找到第一个大于当前小时的数据，做减法，得出的时间就是可设置时才，不过这里就要注意⚠，没找到要从跨天数据数据中找。 另一种情况，如果当天不可用的小时包含选定的小时，这里就要判断选定的分钟在当前小时哪个位置，如果在最后，这又要处理跨小时数据。 想想就很复杂，后来再看这里的代码终于想通，其实，就是给定一个开始时间，找到刚好比开始时间大的数据，然后做个减法的问题。时间对比除了可以逐级对比小时、分钟，还可以直接将小时换算成分钟，然后对比分钟啊。所以把不可用的时间段铺平再一天的时间线上，这样对比就简单得多了。就没有跨小时的说法了。而跨天，只需查一下第二天是否有计划，拿到第一个计划时间段，加入当天就行了。
豁然开朗！😊
用原数据对比简直简单…😓！！！</description></item><item><title>第三方登陆会请求两次的问题</title><link>/works/05/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>/works/05/</guid><description>通过bug复现可以得到，该方法确实被调用两次，有的时候甚至会更多，导致这个bug的主要原因是该方法的调用是通过“发送通知”调用，也就是广播，所以只要该通知发出，注册个该通知的对象，都能接收得到，所以就出现会调用两次，甚至多次。代码中存在退出登陆，重新构建新的登陆页面，而旧的页面没有被释放，这样就会存在页面上虽然只展示一个页面，但内存中实际存在两个对象。解决该bug则需要释放调旧的对象，以及考虑这个方法的调用真的需要使用通知的方式吗？从一开始使用通知的角度来讲，确实这种方式很方便，但后期接手的人更改这里的业务逻辑或许因为没考虑到这个问题，拷贝了一份代码，改改做新需求，这就会导致意想不到的问题存在。我梳理了一下调用逻辑，其实只需要使用回调来处理调用。并且整理的代理对象，让只要写一份的代码，就只写一份。</description></item><item><title>简历2022</title><link>/works/resume/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>/works/resume/</guid><description>所在地：杭州（余杭） 毕业于：211南昌大学软件工程系（2012 ～ 2016） 联系我：13037241933（同微信） 邮件我：w.yzong@outlook.com 个人技能> 个人技能 # 6年iOS开发经验(Objective-C / Swift)； 能够独立开发应用，有一定的架构思维； 对内存管理、多线程编程、runtime、runloop、性能优化、AudioUnit等技术有一定的了解； 熟练使用xib、storyboard或代码自动布局； 乐于接受新事物新语言，并有足够的学习动力； 熟练使用MacOS、Xcode开发工具、证书生成、应用上架发布等； svn、git代码管理； 能够简单使用ReactNative、Flutter写界面； 拥有个人博客、Gitbook 有一定的审美能力； 工作经历> 工作经历 # 杭州蛮牛网络技术有限公司iOS(OC)开发 - 杭州 - 2021.07 ～ 至今> 杭州蛮牛网络技术有限公司iOS(OC)开发 - 杭州 - 2021.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/works/resume/featured.jpg"/></item><item><title>通过控制线程并发数量来优化首页在多设备情况下的表现</title><link>/works/01/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>/works/01/</guid><description>由于之前的代码对于异步任务都是简单的丢到 global 线程中，导致当设备达到一定数量后，子线程不受控制，使 app 卡顿。通过该用NSOperationQueue 来控制线程的并发数量，有效的解决了，多设备的卡顿问题。</description></item><item><title>项目定制优化</title><link>/works/03/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>/works/03/</guid><description>我简化了定制流程，以前需要翻找旧代码去依据情况定制，。。。 统一改成在代码中根据bundleid判断显示或其他….</description></item><item><title>首页替换第三方组件为系统组件</title><link>/works/04/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>/works/04/</guid><description>在了解大概的业务逻辑和代码的情况后，首先是有想法进行重构，但是并没有鲁莽的直接去大刀阔斧的修改代码，二十先对目前冗余代码进行抽象，减少繁杂的代码，使整体更容易阅读，对理解到的点进行添加注释，通过一步一步的整理，以便于后期对该项业务或功能点进行重构，比如：首页，之前的代码为了实现一个简单的则掉效果，引入了复杂的第三方组件，使用该组件还需另外封装数据去适配，显然得不偿失，多浪费一份内存不说，后期需求的适配也极难维护，考虑到该效果如果使用系统组件是十分容易实现的，所以对业务足够了解后，就立马着手重构，同样因为之前就对这块代码进行了整理，所以整个重构过程可以说是十分轻松。</description></item><item><title>iOS Runloop</title><link>/posts/runloop/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>/posts/runloop/</guid><description>整理中&amp;hellip;> 整理中&amp;hellip; # RunLoop与线程> RunLoop与线程 # RunLoop 和线程是一一对应关系，在源码中，线程和 Runloop 互为一对 Key、Value，可以关注一下 loop 的获取：是把线程地址作为key来获取RunLoop的。
void const *CFDictionaryGetValue(CFDictionaryRef hc, void const *key) {...} // ... CFRunLoopRef loop = (CFRunLoopRef)CFDictionaryGetValue(__CFRunLoops, pthreadPointer(t)); 通过这里也可以知道，RunLoop 中是没有提供创建的API，只需要通过在线程内部获取当前 RunLoop 就会自动创建（主线程除外）。</description></item><item><title>iOS签名机制</title><link>/posts/ios-signing/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>/posts/ios-signing/</guid><description>要了解iOS签名，首先得从加密入手，了解对称加密、非对称加密、公钥密码、单向散列函数等名词，这些名词一抛出，可能你云里雾里了，但是不急，学习是需要过程的，下面对这些名词一一介绍。
在学之前我们先通过简单模型理解为什么要加密？A给B发送消息，那么如果有不法分子就想知道A发给B是什么内容，那么就会产生窃听 对称加密
加密和解密的密钥相同即为对称加密。它的特点是：加密解密快、传输不安全。
非对称加密(公钥加密) 加密和解密的密钥不同即为非对称加密。加密解密较慢，相比对称加密更安全。
公钥密码 公钥密码中包含一对密码：加密密钥、解密密钥(公钥，私钥)。公钥是可公开的密钥。 公钥加密是为了解决密钥配送问题，通过简单模型理解： B生成密钥对，并把公钥发送给A，A通过 B的公钥加密消息得到密文，然后发送给B ，B得到密文，通过自己的私钥解密密文就得到了消息。 整个过程没有私钥的泄漏，所以数据传输是安全的，但是想一下： B接收到的消息，真的就是A发送的吗？
混合密码系统(Hybrid Cryptosystem)> 混合密码系统(Hybrid Cryptosystem) # 同时结合对称加密的快的有点和非对称加密安全的优点的加密方式。 在混合密码系统中，会多出一个会话密钥(session key)，它用于加密和解密消息（对称加密），结合上面的例子，B给的公钥，用来加密会话密钥A同时发送，会话密钥加密的消息和公钥加密的会话密钥给B，那么 B则通过私钥解密得到会话密钥，在用会话密钥解密密文得到消息。
单向散列函数> 单向散列函数 # 单向散列函数，可以根据根据消息内容计算出散列值，散列值的长度和消息的长度无关，无论消息是1bit、10M、100G，单向散列函数都会计算出固定长度的散列值。
特点
根据任意长度的消息，计算出固定长度的散列值 计算速度快，能快速计算出散列值 消息不同，散列值也不同（哪怕只有1bit的区别也会产生完全不同的散列值） 具备单向性（散列值无法还原为原始文件）</description></item><item><title>pthread / NSThread</title><link>/posts/pthred-nsthread/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>/posts/pthred-nsthread/</guid><description>pthread> pthread # 导入头文件> 导入头文件 # #import &amp;lt;pthread.h&amp;gt; 创建 pthread_t 对象以及使用> 创建 pthread_t 对象以及使用 # - (void)viewDidLoad { [super viewDidLoad]; // 申明变量 pthread_t thread; // 开启现场，执行任务 pthread_create(&amp;amp;thread, NULL, run, NULL); // 设置子线程状态为 detach, 该线程运行结束后会自动释放所有资源 pthread_detach(thread); } void *run(void *param) { NSLog(@&amp;#34;%@&amp;#34;, [NSThread currentThread]); return NULL; } pthread_create 函数参数说明</description></item><item><title>React Native Flexbox</title><link>/posts/rn-flex-layout/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>/posts/rn-flex-layout/</guid><description>这里只是个人学习对官方的Flexbox布局的简单总结以及备忘，内容并不全面，深入学习建议阅读官方文档。
推荐阅读官网 “使用Flexbox布局”
Flex> Flex # flex属性决定元素在主轴上如何填满可用区域。整个区域会根据每个元素设置的 flex属性值被分割成多个部分。
Flex Direction> Flex Direction # 在组件的style中指定flexDirection可以决定布局的主轴。子元素是应该沿着水平轴(row)方向排列，还是沿着竖直轴(column)方向排列呢？默认值是竖直轴(column)方向。
column | 从上到下 row | 从左到右 column-reverse | 从下到上 row-reverse | 从右到左 Layout Direction> Layout Direction # ltr | 从左到右 rtl | 从右到左 justifyContent> justifyContent # 在组件的 style 中指定justifyContent可以决定其子元素沿着主轴的排列方式。子元素是应该靠近主轴的起始端还是末尾段分布呢？亦或应该均匀分布？可用的选项有：</description></item><item><title>Target-Action组件化方案CTMediator</title><link>/posts/center-core-mode/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>/posts/center-core-mode/</guid><description> 中间管理者，与模块之间约定好的模块名称、方法名称以及参数，通过 Runtime 方法，调用对应对象的方法来获取想要的对象。 实现步骤> 实现步骤 # 自己：中间管理者拥有一套控制逻辑、并制定规则。 增强：模块根据规则封装对外接口，通过添加分类的方式，使得中间管理者能够控制模块相关功能。 项目工程使用中间管理者调度业务、页面、控件等组成APP。 好处> 好处 # 被分成块的页面或组件可以被其他项目很方便的复用，这样大大减少了开发任务量，使开发 APP 过程变成和搭建积木一样。 同时各个模块也是经过验证的，测试的工作也相应的减少。 可以一定程度培养开发人员封装接口能力。 app bug可能相对少，而且查找更为方便， 因为模块可以单独测试，bug的出现一般可以直接指向对应的模块 不好的地方> 不好的地方 # 相比于主项目上直接开发多了接口封装的过程。 对于只负责某一模块开发的人员可能会失去一些对业务的理解。 暂时想到这么多&amp;hellip;</description></item><item><title>生物认证 TouchID/FaceID</title><link>/posts/authentication-biometrics/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>/posts/authentication-biometrics/</guid><description>事前准备> 事前准备 # 添加权限请求描述: e.g. &amp;ldquo;App需要TouchID或FaceID权限，来验证使用者是否是手机所有者&amp;rdquo;
Privacy - Face ID Usage Description OR
NSFaceIDUsageDescription 引入相关的库
LocalAuthentication 引入头文件
#import &amp;lt;LocalAuthentication/LocalAuthentication.h&amp;gt; 使用> 使用 # - (void)faceID { LAContext *context = [LAContext new]; context.</description></item><item><title>链接与符号 Link&amp;Symbol</title><link>/posts/link-symbol/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>/posts/link-symbol/</guid><description>Mach-O> Mach-O # Mach-O格式全称为Mach Object文件格式的缩写，是MacOS或者iOS上可执行的程序格式，类似于Windows上的PE格式 (Portable Executable)，linux上的ELF格式 (Executable and Linking Format)。
Mach-O文件的分类
Executable 应用可执行文件 Dylib Library 动态链接库（又称DSO或DLL） Static Library 静态链接库 Bundle 不能被链接的Dylib，只能在运行时使用dlopen( )加载，可当做macOS的插件 Relocatable Object File 可重定向文件类型 Mach-O文件的组成> Mach-O文件的组成 # Mach-O文件主要包括三部分内容： Header(头部)、Load Commands(加载命令)、Data(数据区)</description></item><item><title>高性能的AutoLayout</title><link>/posts/high-performance-autolayout/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>/posts/high-performance-autolayout/</guid><description>以下是看完 WWDC18: High Performance Auto Layout 的简单总结。
避免操作updateConstants()> 避免操作updateConstants() # 避免操作updateConstants() ，它的调用频次是 120次/s ，如果需要在updateConstants()中操作布局，尽量只布局未设置约束的视图。
func updateConstants() { if constants == nil { // set constants. } super.updateConstants() } 尽量少而简单的视图依赖关系> 尽量少而简单的视图依赖关系 # 设置约束时，尽量只依赖父视图，多个依赖关系可能会造成更多的计算量，而只依赖一个父试图，则只是需要的计算。</description></item></channel></rss>
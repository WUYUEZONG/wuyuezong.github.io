<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CTMediator on a half fish</title><link>/tags/ctmediator/</link><description>Recent content in CTMediator on a half fish</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 30 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/ctmediator/index.xml" rel="self" type="application/rss+xml"/><item><title>中间人模式 (CTMediator) 分析</title><link>/posts/center-core-mode/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>/posts/center-core-mode/</guid><description>组件化> 组件化 # 关于组件化开发，在我的理解里，它一直都是，应用主体去协调各个 pod 。
理解： 如果在一个大型项目中， 首先根据项目去化分业务 (业务1， 业务2， 业务3，&amp;hellip;) 每个业务给到开发人员，开发人员根据业务去开发相应的功能，那么这个过程中，肯定会有不同业务中的相识功能，就比如，业务1，网络请求用A库而业务2用的是B库，那么其实A库、B库能做的事情是一样的，选择较好的就行，所以就要提前制定规则，把应用分层，不至于造成这样的代码冗余，我的想法是分为三层：
首先是基础模块，一般通用切必要的服务可以归类在这一层，比如网络和存储。 其次是业务组件，就是单个UI层面的通用组件，它可以供各个业务模块使用。 最后是业务层，他们是某一业务的完整功能，比如账号、支付、埋点等等。 那么还有一个分工问题。应用层次为三层，是不是对应分人做就是？</description></item></channel></rss>